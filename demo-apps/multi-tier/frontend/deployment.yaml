apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: multi-tier
data:
  nginx.conf: |
    server {
      listen 80;
      server_name _;
      
      location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
      }
      
      location /api {
        proxy_pass http://backend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
      }
    }
  
  index.html: |
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Multi-Tier App</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            }
            h1 { color: #667eea; margin-bottom: 30px; }
            .input-group {
                display: flex;
                gap: 10px;
                margin-bottom: 30px;
            }
            input {
                flex: 1;
                padding: 15px;
                border: 2px solid #667eea;
                border-radius: 10px;
                font-size: 1em;
            }
            button {
                padding: 15px 30px;
                background: #667eea;
                color: white;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 1em;
                font-weight: bold;
            }
            button:hover { background: #5568d3; }
            .items {
                list-style: none;
            }
            .items li {
                padding: 15px;
                margin: 10px 0;
                background: #f8f9fa;
                border-radius: 10px;
                border-left: 4px solid #667eea;
            }
            .status {
                padding: 10px;
                margin: 20px 0;
                border-radius: 5px;
                text-align: center;
            }
            .success { background: #d4edda; color: #155724; }
            .error { background: #f8d7da; color: #721c24; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üì¶ Multi-Tier Application</h1>
            <p><strong>Frontend (Nginx)</strong> ‚Üí <strong>Backend (Node.js)</strong> ‚Üí <strong>Database (PostgreSQL)</strong></p>
            
            <div class="input-group">
                <input type="text" id="itemName" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ item">
                <button onclick="addItem()">–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            
            <div id="status"></div>
            
            <h2>–°–ø–∏—Å–æ–∫ items:</h2>
            <ul id="items" class="items"></ul>
        </div>
        
        <script>
            async function loadItems() {
                try {
                    const res = await fetch('/api/items');
                    const items = await res.json();
                    const list = document.getElementById('items');
                    list.innerHTML = items.map(item => 
                        \`<li><strong>\${item.name}</strong> - \${new Date(item.created_at).toLocaleString()}</li>\`
                    ).join('');
                } catch (err) {
                    showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
                }
            }
            
            async function addItem() {
                const name = document.getElementById('itemName').value;
                if (!name) return;
                
                try {
                    await fetch('/api/items', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name })
                    });
                    document.getElementById('itemName').value = '';
                    showStatus('Item –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
                    loadItems();
                } catch (err) {
                    showStatus('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', 'error');
                }
            }
            
            function showStatus(msg, type) {
                const status = document.getElementById('status');
                status.textContent = msg;
                status.className = 'status ' + type;
                setTimeout(() => status.className = 'status', 3000);
            }
            
            loadItems();
        </script>
    </body>
    </html>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: multi-tier
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: html
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: config
        configMap:
          name: frontend-config
      - name: html
        configMap:
          name: frontend-config

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: multi-tier
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30300

